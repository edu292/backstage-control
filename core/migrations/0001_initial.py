# Generated by Django 5.2.7 on 2025-10-25 14:44

import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('data', models.DateField()),
                ('status', models.CharField(choices=[('andamento', 'Em Andamento'), ('concluido', 'Concluído')], default='andamento', max_length=20)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('nome', 'data'), name='unique_evento_em_data')],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('quantidade_em_estoque', models.IntegerField(default=0, editable=False)),
                ('valor_total', models.DecimalField(decimal_places=4, default=0, editable=False, max_digits=10)),
                ('preco_medio', models.GeneratedField(db_persist=False, expression=models.Case(models.When(quantidade_em_estoque=0, then=models.Value('0.00')), default=django.db.models.expressions.CombinedExpression(models.F('valor_total'), '/', models.F('quantidade_em_estoque')), output_field=models.DecimalField(decimal_places=4, max_digits=10)), output_field=models.DecimalField(decimal_places=4, max_digits=10))),
            ],
            options={
                'verbose_name_plural': 'Itens',
                'constraints': [models.CheckConstraint(condition=models.Q(('quantidade_em_estoque__gte', 0)), name='quantidade_em_estoque_gte_zero'), models.CheckConstraint(condition=models.Q(('valor_total__gte', 0)), name='valor_total_gte_zero')],
            },
        ),
        migrations.CreateModel(
            name='SolicitacaoEvento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade_solicitada', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('quantidade_alocada', models.IntegerField(default=0, editable=False)),
                ('quantidade_faltando', models.GeneratedField(db_persist=False, expression=django.db.models.expressions.CombinedExpression(models.F('quantidade_solicitada'), '-', models.F('quantidade_alocada')), output_field=models.PositiveIntegerField())),
                ('evento', models.ForeignKey(limit_choices_to={'status': 'andamento'}, on_delete=django.db.models.deletion.CASCADE, related_name='itens_solicitados', to='core.evento')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.item')),
            ],
            options={
                'verbose_name': 'Solicitação Evento',
                'verbose_name_plural': 'Solicitações de Eventos',
                'constraints': [models.UniqueConstraint(fields=('evento', 'item'), name='unique_solitacao_item_evento'), models.CheckConstraint(condition=models.Q(('quantidade_solicitada__gt', 0)), name='quantidade_solicitada_maior_que_zero'), models.CheckConstraint(condition=models.Q(('quantidade_alocada__gte', 0)), name='quantidade_alocada_maior_ou_igual_zero'), models.CheckConstraint(condition=models.Q(('quantidade_alocada__lte', models.F('quantidade_solicitada'))), name='quantidade_alocada_nao_deve_exceder_solicitada')],
            },
        ),
        migrations.CreateModel(
            name='TransacaoEstoque',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('compra', 'Compra'), ('alocacao', 'Alocação para Evento'), ('retorno', 'Retorno de Evento'), ('remocao', 'Remoção Manual'), ('adicao', 'Adição Manual'), ('patrocinio', 'Patrocínio')], db_index=True, max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('quantidade', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('preco_unidade', models.DecimalField(blank=True, decimal_places=4, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Preço Unidade')),
                ('nota', models.TextField(blank=True, null=True)),
                ('evento', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transacoes', to='core.evento')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.item')),
                ('responsavel', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transação de Estoque',
                'verbose_name_plural': 'Transações de Estoque',
                'constraints': [models.CheckConstraint(condition=models.Q(('quantidade__gt', 0)), name='quantidade_maior_que_zero'), models.CheckConstraint(condition=models.Q(('preco_unidade__gte', 0)), name='preco_positivo')],
            },
        ),
    ]
